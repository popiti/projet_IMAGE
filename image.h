#ifndef IMAGE_H
#define IMAGE_H

#include "utility.h"


/*====================================================================*/
/*======================== TYPE DEFINITION ===========================*/
/*====================================================================*/

//byte type, can take value between 0 and 255
typedef unsigned char byte;


typedef struct{
    byte r;
    byte g;
    byte b;
} pixel;


typedef pixel color;


typedef struct{
    unsigned int sizeX;
    unsigned int sizeY;
    unsigned int depth;
    pixel** pixels;
} image;


/*====================================================================*/
/*============================ UTILITY ===============================*/
/*====================================================================*/


//======================================================================
int clamp(int _value, int _min, int _max);

//======================================================================
float clampf(float _value, float _min, float _max);

//======================================================================
bool skip_comment(FILE* _file, char _string[]);


/*====================================================================*/
/*========================= IMAGE UTILITY ============================*/
/*====================================================================*/


//======================================================================
image* create_image(size_t size_x, size_t size_y, size_t _depth, color _color);

//======================================================================
image* copy_image(image* _image);

//======================================================================
void free_image(image* _image);

//======================================================================
void save_ppm(image* _image, char name_file[]);

//======================================================================
image* read_ppm(char name_file[]);



/*====================================================================*/
/*============================ FILTERS ===============================*/
/*====================================================================*/


//======================================================================
void to_grayscale(image* _image);

//======================================================================
void to_sepia(image* _image);

//======================================================================
void to_negative(image* _image);

//======================================================================
void thresholding(image* _image, size_t _threshold);

//======================================================================
void pixelize(image* _image, size_t _pixel_size);

//======================================================================
void posterize(image* _image, size_t _depth);

//======================================================================
void shift_component_to_left(image* _image);

//======================================================================
void shift_component_to_right(image* _image);

//======================================================================
void apply_3x3_convolution(image* _image, float conv_matrix[3][3]);


/*====================================================================*/
/*======================== LOW-PASS FILTERS ==========================*/
/*====================================================================*/


//======================================================================
void box_blur(image* _image, size_t _box_size, size_t _repetitions);

//======================================================================
void gaussian_filter(image* _image, size_t _repetition);


/*====================================================================*/
/*======================== HIGH-PASS FILTERS =========================*/
/*====================================================================*/


//======================================================================
void laplace_4(image* _image);

//======================================================================
void laplace_8(image* _image);

//======================================================================
void laplace_8Bis(image* _image);

//======================================================================
void sobel_filter(image* _image);

//======================================================================
void prewitt_filter(image* _image);


/*====================================================================*/
/*========================= IMAGE TRANSFORM ==========================*/
/*====================================================================*/


//======================================================================
void flip_x(image* _image);

//======================================================================
void flip_y(image* _image);

//======================================================================
void rotate(image* _image, float _angle);

//======================================================================
//void resize(image* _image, size_t _size_x, size_t size_y);


#endif // IMAGE_H
